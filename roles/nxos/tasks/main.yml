# ==============================================================
#  Copyright (c) 2023 Cisco and/or its affiliates.
#  This software is licensed to you under the terms of the Cisco Sample
#  Code License, Version 1.1 (the "License"). You may obtain a copy of the
#  License at
#  https://developer.cisco.com/docs/licenses
#  All use of the material herein must be in accordance with the terms of
#  the License. All rights not expressly granted by the License are
#  reserved. Unless required by applicable law or agreed to separately in
#  writing, software distributed under the License is distributed on an "AS
#  IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
#  or implied.
#  __author__ = "Trevor Maco <tmaco@cisco.com>"
#  __copyright__ = "Copyright (c) 2023 Cisco and/or its affiliates."
#  __license__ = "Cisco Sample Code License, Version 1.1"
# ==============================================================
---
- name: Backup the config for {{ inventory_hostname }}
  tags: backup, install
  nxos_config:
    backup: yes
    backup_options:
      filename: "{{ inventory_hostname }}_backup.cfg"
      dir_path: ./backup
  register: config_output

- name: Check Current Version
  block:
    - name: Get current NXOS version in JSON format
      tags: pre-check, check-version, post-check, install
      nxos_command:
        commands:
        - command: show version
          output: json
      register: show_version

    - name: Set current NXOS version as variable
      tags: pre-check, check-version, post-check, install
    #  debug: msg="{{ show_version.stdout_lines[0].nxos_ver_str }}"
      set_fact:
        current_nxos_ver: "{{ show_version['stdout_lines'][0]['nxos_ver_str'] }}"

    - name: Assert that switch is NOT running with the target NXOS version
      tags: pre-check, check-version, install
      assert:
        quiet: no
        success_msg: "{{ inventory_hostname }} not running target verion {{ target_nxos_ver }}, current version is {{ current_nxos_ver }}"
        fail_msg: "{{ inventory_hostname }} already running {{ current_nxos_ver }}"
        that:
        - "'{{ current_nxos_ver }}' != '{{ target_nxos_ver }}'"

- name: Check if switch has the target image in the "bootflash:" directory
  tags: pre-check, image-check, image-copy, install
  nxos_command:
    commands: "dir bootflash: | in {{ target_image }} | awk '{ print $6 }'"
  register: image_check

- name: Copy NXOS Image if does NOT exists in the bootflash dir
  block:
    - name: Would you like to copy the NXOS image via {{ protocol | upper }}?
      tags: image-copy, install
      pause:
        prompt: "Press enter to continue or cntrl-c + a to abort"

    - name: Copy NXOS image file from {{ scp_server }} via {{ protocol | upper }} server
      tags: image-copy, install
      nxos_command:
        commands:
        - command: 'clear ssh hosts'
        - command: 'copy {{ protocol }}://{{ scp_user }}@{{ scp_server }}/{{ target_image }} bootflash: vrf {{ vrf }} use-kstack'
          check_all: True
          prompt:
            - "Are you sure you want to continue connecting (yes/no)?"
            - "password:"
          answer:
            - 'yes'
            - "{{ scp_password }}"
      no_log: false
      register: image_copy

    - name: Get MD5 Checksum for the Target Image
      tags: image-validate, install
      nxos_command:
        commands: 'show file bootflash:{{ target_image }} md5sum'
      register: image_md5

    - name: Assert MD5 Image File Validation
      tags: image-validate, install
      assert:
        quiet: no
        success_msg: 'MD5 checksum validation successful'
        fail_msg: 'MD5 checksum validation failed, Corrupted Image!'
        that:
          - "'{{ image_md5.stdout[0] }}' == '{{ target_image_md5 }}'"
      changed_when: false
      register: image_validation_result

    - name: Check Passed
      tags: pre-check, install
      debug: msg=" {{ inventory_hostname }} passed all the checks."
  when: "image_check.stdout[0] != target_image"

- name: Install/Upgrade NXOS Software
  block:
    - name: Preparing to upgrade the NXOS software, this will be a disruptive operation to the devices
      tags: install
      pause:
        prompt: "Press enter to continue or cntrl-c + a to abort"

    - name: Installing Target NXOS {{ target_nxos_ver }}
      tags: install
      check_mode: '{{ install_check_mode }}'
      nxos_install_os:
        system_image_file: '{{ target_image }}'
        issu: no
      register: install_output
      vars:
        ansible_command_timeout: 600
        ansible_connect_timeout: 600

    - name: Print Install Results
      tags: install
      debug: var=install_output.install_state

    - name: Waiting For {{ inventory_hostname }} To Come Back Up
      wait_for:
        host: "{{ (ansible_ssh_host|default(ansible_host))|default(inventory_hostname) }}"
        port: 22
        state: started
        timeout: 300
        delay: 60

- name: Check Version After Upgrade
  block:
    - name: Get current NXOS version in JSON format (after upgrade)
      tags: pre-check, check-version, post-check, install
      nxos_command:
        commands:
          - command: show version
            output: json
      register: show_version_upgrade

    - name: Set current NXOS version as variable
      tags: pre-check, check-version, post-check, install
      #  debug: msg="{{ show_version.stdout_lines[0].nxos_ver_str }}"
      set_fact:
        upgraded_nxos_ver: "{{ show_version_upgrade['stdout_lines'][0]['nxos_ver_str'] }}"

    - name: Assert that switch is running with the target NXOS version {{ target_nxos_ver }} After Upgrade
      tags: post-check, install
      assert:
        quiet: no
        success_msg: "{{ inventory_hostname }} has been upgraded to {{ upgraded_nxos_ver }}"
        fail_msg: "Failed to upgrade the {{ inventory_hostname }}, it is still runninng {{ upgraded_nxos_ver }}"
        that:
          - "'{{ upgraded_nxos_ver }}' == '{{ target_nxos_ver }}'"

- name: Delete Old Image File
  block:
    - name: Do you wish to delete old images from the device?
      tags: image-delete
      pause:
        prompt: "Press enter to continue or cntrl-c + a to abort"

    - name: Check and register the old image(s) as variable
      tags: image-delete
      nxos_command:
        commands: "dir bootflash: | in nxos. | ex {{ target_image }} | awk '{ print $6 }'"
      register: delete_image

    - debug:
        var: item
      with_items: "{{ delete_image.stdout_lines }}"
      tags: image-delete

    - name: Delete an image from the bootflash directory
      tags: image-delete
      nxos_command:
        commands: ["delete {{ item }} no-prompt"]
      with_items: "{{ delete_image.stdout_lines }}"
